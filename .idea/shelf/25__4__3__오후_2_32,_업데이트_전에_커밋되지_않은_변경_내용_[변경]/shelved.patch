Index: ROS/speech/prompting.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\nsys.path.append(r\"C:\\Users\\SSAFY\\Desktop\\S12P21E103\\ROS\\speech\")\r\nfrom search_vector import search_hospital_info\r\nimport logging\r\nimport openai\r\nfrom dotenv import load_dotenv\r\nimport os\r\n\r\n# load .env\r\nload_dotenv()\r\n\r\nAPI_KEY = os.environ.get('API_KEY')\r\n\r\n# \uD83D\uDD39 로깅 설정\r\nlogging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s [%(levelname)s] %(message)s\")\r\n\r\n# OpenAI API 키 설정\r\nclient = openai.OpenAI(api_key=API_KEY)\r\n\r\n\r\n# \uD83D\uDD39 대화 히스토리 저장용 리스트\r\nhistory = []\r\n\r\n\r\n# 대화형 챗봇 생성 함수\r\ndef generate_response(query, search_results):\r\n    logging.debug(f\"사용자 질문 수신: {query}\")\r\n    logging.debug(f\"검색된 병원 정보 원본: {search_results}\")\r\n    \r\n    # 검색된 병원 정보를 텍스트 형식으로 요약\r\n    summarized_results = [\r\n        f\"{item.get('facility_name', '알 수 없음')}: {item.get('floor_info', '정보 없음')} | {item.get('location', '정보 없음')} | {item.get('service_description', '정보 없음')}\"\r\n        for item in search_results[:5]\r\n    ]\r\n    search_results_str = \"\\n\".join(summarized_results)\r\n\r\n    messages=[\r\n            {\r\n                \"role\": \"system\",\r\n                \"content\": f\"\"\"\r\n                    너는 삼성병원의 의료 시설 정보를 안내하는 AI야.\r\n                    사용자의 질문을 이해하고, 검색된 병원 정보를 바탕으로 정확하고 자연스러운 답변을 제공해.\r\n\r\n                    현재 제공할 수 있는 병원 정보:\r\n                    {search_results_str if search_results else \"현재 제공할 수 있는 병원 정보가 없습니다.\"}\r\n\r\n                    응답 규칙:\r\n                    1. **질문을 분석**해서 사용자가 원하는 정보를 찾아.\r\n                    2. **검색된 정보가 있으면**, 해당 내용을 정확한 높임말로 전달해.\r\n                       - 예: \"응급실은 1층에 있습니다.\"\r\n                    3. **검색된 정보가 없으면**, `\"해당 정보를 찾을 수 없습니다.\"`라고 답하고, 추가 질문을 유도해.\r\n                    4. **사용자가 잘못 알고 있을 경우**, 올바른 정보를 제공해.\r\n                       - 예: \"응급실은 2층이 아니라 1층에 있습니다.\"\r\n                    5. **응답은 항상 높임말로 작성**해.\r\n\r\n                    답변만 출력해.\r\n                \"\"\"\r\n            },\r\n            # {\r\n            #     \"role\": \"user\",\r\n            #     \"content\": query\r\n            # }\r\n        ]\r\n\r\n    # \uD83D\uDD39 기존 대화 히스토리 추가\r\n    messages.extend(history)\r\n\r\n    # \uD83D\uDD39 현재 질문 추가\r\n    messages.append({\"role\": \"user\", \"content\": query})\r\n\r\n\r\n    logging.info(f\"메시지 출력 : {messages}\")\r\n\r\n    # \uD83D\uDD39 OpenAI GPT 모델 호출\r\n    logging.info(\"GPT 모델을 사용해 응답 생성 중...\")\r\n    response = client.chat.completions.create(\r\n        model=\"gpt-4o\",  # 또는 \"gpt-3.5-turbo\"\r\n        messages=messages,\r\n        max_tokens=100,\r\n        temperature=0.7\r\n    )\r\n\r\n    print(f\"응답: {response}\")\r\n    response_text = response.choices[0].message.content\r\n\r\n    # ✅ 새로운 대화 내역 저장\r\n    history.append({\"role\": \"user\", \"content\": query})\r\n    history.append({\"role\": \"assistant\", \"content\": response_text})\r\n\r\n\r\n    response_text = response.choices[0].message.content\r\n\r\n    logging.debug(f\"최종 응답: {response_text}\")\r\n    return response_text\r\n\r\n# history 초기화 함수\r\ndef clear_history():\r\n    global history\r\n    history = []\r\n    print(\"대화 기록이 초기화되었습니다.\")\r\n\r\n\r\n# \uD83D\uDD39 대화형 챗봇 실행 함수\r\ndef chat():\r\n    print(\"챗봇을 시작합니다. 종료하려면 'exit'을 입력하세요.\")\r\n\r\n    while True:\r\n        user_input = input(\"사용자: \")\r\n        logging.info(f\"사용자 입력: {user_input}\")\r\n\r\n        if user_input.lower() == 'exit':\r\n            logging.info(\"챗봇 종료\")\r\n            print(\"챗봇을 종료합니다.\")\r\n            break\r\n\r\n        # 검색 결과를 받아오기\r\n        search_results = search_hospital_info(user_input)\r\n        logging.debug(f\"검색 결과 반환: {search_results}\")\r\n        \r\n        # 검색 결과가 없다면 경고 메시지\r\n        if not search_results:\r\n            logging.warning(\"검색 결과 없음\")\r\n            print(\"❌ 관련된 정보를 찾을 수 없습니다.\")\r\n            continue\r\n\r\n        # 검색 결과를 처리하여 응답 생성\r\n        response = generate_response(user_input, search_results)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    chat()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ROS/speech/prompting.py b/ROS/speech/prompting.py
--- a/ROS/speech/prompting.py	(revision 21de17013dce49af85086b49fdc9c2a45f7b7242)
+++ b/ROS/speech/prompting.py	(date 1743657340758)
@@ -38,7 +38,7 @@
             {
                 "role": "system",
                 "content": f"""
-                    너는 삼성병원의 의료 시설 정보를 안내하는 AI야.
+                    너는 삼성병원의 의료 시설 정보를 안내하고 일상대화도 가능한 AI챗봇이이야.
                     사용자의 질문을 이해하고, 검색된 병원 정보를 바탕으로 정확하고 자연스러운 답변을 제공해.
 
                     현재 제공할 수 있는 병원 정보:
@@ -48,7 +48,7 @@
                     1. **질문을 분석**해서 사용자가 원하는 정보를 찾아.
                     2. **검색된 정보가 있으면**, 해당 내용을 정확한 높임말로 전달해.
                        - 예: "응급실은 1층에 있습니다."
-                    3. **검색된 정보가 없으면**, `"해당 정보를 찾을 수 없습니다."`라고 답하고, 추가 질문을 유도해.
+                    3. **검색된 정보가 없으면**, `"해당 정보를 찾을 수 없습니다."`라고 답하거나 너가 답할 수 있는거면 답해주거나 추가 질문을 유도해.
                     4. **사용자가 잘못 알고 있을 경우**, 올바른 정보를 제공해.
                        - 예: "응급실은 2층이 아니라 1층에 있습니다."
                     5. **응답은 항상 높임말로 작성**해.
